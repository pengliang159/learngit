java并发编程实践
1.无论何时，只要有多于一个的线程访问给定的状态变量，而且其中某个线程会写入该变量，此时必须使用同步来协调线程对变量的访问。java中首要的同步机制是synchronized关键字，它提供了独占锁。除此之外，术语“同步”还包括volatile变量，显示锁和原子	变量的使用
	在没有正确同步的情况下，如果多个线程访问了同一个变量，你的程序就存在隐患。有3种方法修复它：
		a).不要跨线程共享变量
		b).使状态变量为不可变的；
		c).在任何访问状态变量的时候使用同步
2.竞态条件（race condition），从多进程间通信的角度来讲，是指两个或多个进程对共享的数据进行读或写的操作时，最终的结果取决于这些进程的执行顺序。
竞态条件（race condition）是指设备或系统出现不恰当的执行时序，而得到不正确的结果。
3.线程安全型：当多个线程访问某个类时，这个类始终都能表现出正确的行为，那么就称这个类是线程安全的。要求无论是多线程中的时序或交替操作，都要保证不破坏那些不变约束。
4.java.util.concurrent.atomic 包中包括了原子变量类，这些类用来实现数字和对象引用的原子状态转换。
5.每个java对象都可以隐式地扮演一个用于同步的锁的角色：这些内置的锁被称作内部锁或监视器锁。执行线程进入synchronized块之前会自动获得锁；而无论通过正常控制路径退出，还是从块中抛出异常，线	程都在放弃对synchronized块的控制时自动释放锁。获得内部锁的唯一途径事：进入这个内部锁保护的同步块或方法。
6.互斥锁：内部锁在Java中扮演了互斥所的角色。意味着至多只有一个线程可以拥有锁，当线程A尝试请求一个被线程B占有的锁时，线程A必须等待或者阻塞，直到B释放它。如果B永远不释放锁，A将永远等下去
7.对于每个可被多个线程访问的可变状态变量，如果所有访问它的线程在执行时都占有同一个锁，这种情况下，我们称这个变量是由这个锁保护的。