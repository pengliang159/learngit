http://mybatis.github.io/mybatis-3/zh/getting-started.html
maven:
	<dependency>
	  <groupId>org.mybatis</groupId>
	  <artifactId>mybatis</artifactId>
	  <version>x.x.x</version>
	</dependency>
	
一、从XML中构建SqlSessionFactory
每个基于Mybatis的应用都是以一个SqlSessionFactory的实例为中心的。
SqlSessionFactory 的实例可以通过SqlSessionFactoryBuilder获得。
而SqlSessionFactoryBuilder则可以从XML配置文件或一个预先定制的Configuration的实例构建出SqlSessionFactory的实例。
1).构建SqlSessionFactory实例：
	使用类路径下的资源文件进行配置。也可以使用任意的输入流(InputStream)实例，包括字符串形式的文件路径或者file://的URL形式的文件路径来配置。Mybatis包含一个Resources的工具类，它可使从classpath或其他位置加载资源文件更加容易。
	String resource = "org/mybatis/example/mybatis-config.xml";
	InputStream inputStream = Resources.getResourceAsStream(resource);
	sqlSessionFatory = new SqlSessionFactoryBuilder().build(inputStream);

2).XML配置文件：包含了对MyBatis系统的核心设置，包含获取数据库连接实例的数据源(DataSource)和决定事务范围和控制方式的事务管理器(TransactionManager)。
	a)environment 包含了事务管理和连接池的配置。
	b)mappers元素则是包含一组mapper映射器(这些mapper的XML文件包含了SQL代码和映射定义信息)
	
3).不用XML配置文件：
	DataSource dataSource = BlogDataSourceFactory.getBlogDataSource();
	TransactionFactory transactionFactory = new JdbcTransactionFactory();
	Environment environment = new Envionment("development", transactionFactory, dataSource);
	Configuration configuration = new Configuration(environment);
	configuration.addMapper(BlogMapper.class);
	SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(configuration);
	
4).从SqlSessionFactory中获取SqlSession
	SqlSession完全包含了面向数据库执行SQL命令所需的所有方法。可以通过SqlSession实例来直接执行已映射的SQL语句。
		旧版本：
		SqlSession sqlSession = SqlSessionFactory.openSession();
		try {
			Blog blog = (Blog) session.selectOne("org.mybatis.example.BlogMapper.selectBlog", 101); 
		} finally{
			session.close();
		}
		新版本支持：
		BlogMapper mapper = session.getMapper(BlogMapper.class);
		Blog blog = mapper.selectBlog(101);
		
		BlogMapper.xml:
			<mapper namespace="org.mybatis.example.BlogMapper">
				<select id="selectBlog" resultType="Blog">
					select * from Blog where id=#{id}
				</select>
			</mapper>
			
		Namespaces：在之前版本的MyBatis中是可选的，容易引起混淆因此是没有益处的。现在的命名空间则是必须的，目的是希望能比只是 简单的使用更长的完全限定名来区分语句 更进一步。
		命名空间使得你所见到的接口绑定成为可能，尽管你觉得这些东西未必用得上，你还是应该遵循这里的规定以防哪天你改变了注意。使用命名空间，并将它置于合适的Java包命名空间下，会使代码更整洁并提高Mybatis的可用性。
		
		命名解析：为了减少输入量，Mybatis对所有的命名配置元素（包括语句，结果映射，缓存等）使用了如下的命名解析规则：
			1)完全限定名(比如"com.mypackage.MyMapper.selectAllThings")将被直接查找并且找到即用。
			2)短名称(比如"selectAllThings")如果全局唯一也可以作为一个单独的引用。如果不唯一，有两个或两个以上的相同名称(比如"com.foo.selectAllThings"和"com.bar.selectAllThings").那么使用时就会收到错误报告说短名称是不唯一的，这种情况下就必须使用完全限定名。
		
		可以使用Java注解替代XML配置：
		public interface BlogMapper{
			@Select("select * FROM blog WHERE id = #{id}");
			Blog selectBlog(int id);
		}
		对于简单语句来说，注解使代码显得更加简洁，然而Java注解对于稍微复杂的语句就会力不从心并且会显得更加混乱。因此，对于复杂的，最好使用XML来映射语句。按需求来使用XML或者基于注解的语句映射方式。
		
5).范围(Scope)和生命周期 ：理解不同范围和生命周期是至关重要的，因为错误的使用会导致非常严重的并发问题。
	对象生命周期和依赖注入框架：依赖注入框架可以创建线程安全的、基于事务的SqlSession和映射器(mapper)并将它们直接注入到你的bean中，因此可以直接忽略他们的生命周期。如果对如何通过依赖注入框架来使用Mybatis感兴趣可以研究一下Mybatis-Spring或MyBatis-Guice两个子项目。
	
	SqlSessionFactoryBuilder：可以被实例化、使用和丢弃，一旦创建了SqlSessionFactory，就不再需要它了。因此SqlSessionFactoryBuilder实例的最佳范围是方法范围(也就是局部方法变量)。可以重用SqlSessionFactoryBuilder来创建多个SqlSessionFactory实例，但是最好还是不要让其一直存在以保证所有的XML解析资源开放给更重要的事情。
	
	SqlSessionFactory：一旦被创建就应该在应用的运行期间一直存在，没有任何理由对它进行清楚或重建。使用SqlSessionFactory的最佳实践是在应用运行期间不要重复创建多次，多次重建SqlSessionFactory被视为一种代码“坏味道(bad smell)”。因此SqlSessionFactory的最佳范围是应用范围。有很多方法可以做到，最简单的就是使用单例模式或者静态单例模式。
	
	SqlSession：每个线程都应该有它自己的SqlSession实例。SqlSession的实例不是线程安全的，因此是不能共享的，所以它的最佳的范围是请求或方法范围。绝对不能将SqlSession实例的引用放在一个类的静态域，甚至一个类的实例变量也不行。也绝不能将SqlSession实例的引用放在任何类型的管理范围中，比如Servlet架构中的HttpSession。把关闭放在finally块中以确保每次都能执行关闭。
	
	映射器实例(mapper Instances) 映射器是创建用来绑定映射语句的接口。是从SqlSession中获得的。因此从技术层面讲，映射器实例的最大范围是和SqlSession相同的，因为它们都是从SqlSession里被请求的。尽管如此，映射器的最佳范围是方法范围。也就是说，映射器实例应该在调用它们的方法中被请求，用过之后即可废弃。并不需要显示地关闭映射器实例，尽管在整个请求范围保持映射器实例也不会有什么问题，但是很快你会发现，像SqlSession一样，在这个范围上管理太多的的资源的话会难于控制。所以要保持简单，最好把映射器放在方法范围内。
	SqlSession session = sqlSessionFactory.openSession();
	try {
	  BlogMapper mapper = session.getMapper(BlogMapper.class);
	  // do work
	} finally {
	  session.close();
	}
	
二、XML映射配置文件
	MyBatis的配置文件包含了影响MyBatis行为甚深的设置(settings)和属性(Propertis)信息。文档的顶层结果如下：
		1).configuration配置：
			a). properties属性
				这些属性都是可外部配置且可动态替换的，既可以在典型的Java属性文件中配置，亦可通过properties元素的子元素来传递。例如：
					<properties resource="org/mybatis/example/config.properties">
						<property name="username" value="dev_user"/>
						<property name="password" value="123456"/>
					</properties>
				其中的属性可以在整个配置文件中使用来替换需要动态配置的属性值(当然，大多数都支持这种，如Spring)。比如：
					<dataSource type="POOLED">
						<property name="driver" value="${driver}"/>
						<property name="url" value="${url}"/>
					</dataSource>
				这个例子中的username和password将会由properties元素中设置的相应值来替换。driver和url属性将会由config。properties文件中对应的值来替换。
				属性也可以被传递到SqlSessionBuilder.build()方法中。例如：
				SqlSessionFactory factory = sqlSessionFactoryBuilder.build(reader, props);
				SqlSessionFactory factory = sqlSessionFactoryBUilder.build(reader, environment, props);
				
				如果属性在多个地方配置，将按照下面的顺序来加载：
					1)在properties元素体内指定的顺序首先被读取。
					2)然后根据properties元素中的resource属性读取类路径下属性文件或根据url属性指定的路径读取属性文件，并覆盖已读取的同名属性。
					3)最后读取作为方法参数传递的属性，并覆盖已读取的同名属性。
				所以，方法参数传递的属性具有最高优先级，resource/url属性中指定的配置文件次之，最低优先级的是properties属性中指定的属性。
		
		2).settings设置：mybatis中 极为重要 的调整设置，它们会改变Mybatis的运行时行为。下面描述了设置各项的意图、默认值
			cacheEnabled	该配置影响的所有映射器中配置的缓存的全局开关。	true | false	true(默认值)
			
			lazyLoadingEnabled	延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态。	true | false	false(默认值)
			
			aggressiveLazyLoading	当启用时，对任意延迟属性的调用会使带有延迟加载属性的对象完整加载；反之，每种属性将会按需加载。	true | false	true(默认值)
			
			multipleResultSetsEnabled	是否允许单一语句返回多结果集（需要兼容驱动）。	true | false	true(默认值)
			
			useColumnLabel	使用列标签代替列名。不同的驱动在这方面会有不同的表现， 具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果。	true | false	true(默认值)
			
			useGeneratedKeys	允许 JDBC 支持自动生成主键，需要驱动兼容。 如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能兼容但仍可正常工作（比如 Derby）。	true | false	False(默认值)
			
			autoMappingBehavior	指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示取消自动映射；PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。 FULL 会自动映射任意复杂的结果集（无论是否嵌套）。	NONE, PARTIAL, FULL	    PARTIAL(默认值)
			
			defaultExecutorType	配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）； BATCH 执行器将重用语句并执行批量更新。	SIMPLE REUSE BATCH	SIMPLE(默认值)
			
			defaultStatementTimeout	设置超时时间，它决定驱动等待数据库响应的秒数。	Any positive integer	Not Set (null)
			
			safeRowBoundsEnabled	允许在嵌套语句中使用分页（RowBounds）。	true | false	False
			
			mapUnderscoreToCamelCase	是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。	true | false	False
			
			localCacheScope	MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。 默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 的不同调用将不会共享数据。	SESSION | STATEMENT	SESSION
		
			jdbcTypeForNull	当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。 某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。	JdbcType enumeration. Most common are: NULL, VARCHAR and OTHER	OTHER
			
			lazyLoadTriggerMethods	指定哪个对象的方法触发一次延迟加载。	A method name list separated by commas	equals,clone,hashCode,toString
			
			defaultScriptingLanguage	指定动态 SQL 生成的默认语言。	A type alias or fully qualified class name.	  org.apache.ibatis.scripting.xmltags.XMLDynamicLanguageDriver
			
			callSettersOnNulls	指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这对于有 Map.keySet() 依赖或 null 值初始化的时候是有用的。注意基本类型（int、boolean等）是不能设置成 null 的。	true | false	false
			
			logPrefix	指定 MyBatis 增加到日志名称的前缀。	Any String	Not set
			
			logImpl	指定 MyBatis 所用日志的具体实现，未指定时将自动查找。	SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING	Not set
			
			proxyFactory	指定 Mybatis 创建具有延迟加载能力的对象所用到的代理工具。	CGLIB | JAVASSIST	CGLIB
				
		3).typeAliases 类型别名： 是为Java类型设置的一个短的名字。它只和XML配置相关，存在的意义仅在于用来减少类完全限定名的冗余。例如：
			<typeAliases>
			  <typeAlias alias="Blog" type="domain.blog.Blog"/> // 当这样配置时，Blog可以用在任何使用domain.blog.Blog的地方。
			  <pagekage name="domain.blog" /> // 这样指定一个包，会在包名下面搜索需要的Java Bean，再没有注解的情况下，会使用类的首字母小写方式作为别名。
			</typeAliases>
			已经为许多常见的Java类型内建了相应的类型别名，它们都是大小写不敏感的。 如：_byte(别名) --> byte(映射的类型)  基本数据类型的别名都是前面加个 _  。它们的包装类型为它们的首字母小写
			
		4).typeHandlers 类型处理器：无论是MyBatis在 预处理语句(PreparedStatement)中设置一个参数时，还是从结果集中取出一个值时，都会用类型处理器将获取的值以合适的方式转换成Java类型。
		可以重写类型处理器或创建自己的类型处理器来处理不支持的或非标准的类型。实现org.apache.ibatis.type.TypeHandler接口，或继承一个很便利的类org.apache.ibatis.type.BaseTypeHandler，然后可以选择性地将它映射到一个JDBC类型。
		MyBatis不会窥探数据库元信息来决定使用哪种类型，所以你必须在参数和结果映射中指明那是VARCHAR类型的字段，以使其能够绑定到正确的类型处理器上。这是因为：Mybatis直到语句被执行才清楚数据类型。
		通过类型处理器的泛型：MyBatis可以得知该类型处理器处理的Java类型，
		不过这种行为可以通过两种方法改变：
			a).在类型处理器的配置元素(typeHandler element)上增加一个javaType属性(比如：javaType="String");
			b).在类型处理器的类上(TypeHandler class)增加一个@MappedTypes注解来指定与其关联的Java类型列表。如果在javaType属性中也同时指定，则注解方式将被忽略。
			
		可以通过两种方式来指定被关联的JDBC类型：
			a).在类型处理器的配置元素上增加一个javaType属性(比如：javaType="VARCHAR");
			b).在类型处理起的类上(TypeHandler class)增加一个@MappedJdbcTypes注解来指定与其关联的JDBC类型列表。如果在javaType属性中也同时指定，则注解方式将被忽略。
		最后，可以让Mybatis为你查找类型处理器：
			<typeHandlers>
				<package name="org.mybatis.example"/>
			</typeHandlers>
		注意在使用自动检索(autodiscovery)功能的时候，只能通过注解方式来指定JDBC的类型。
		
		你能创建一个泛型类型处理器，它可以处理多于一个类。为达到此目的，需要增加一个接收该类作为参数的构造器，这样在构造一个类型处理器的时候Mybatis就会传入一个具体的类。
		
		处理枚举类型：
			映射枚举类型Enum，则需要从EnumTypeHandler或者EnumOrdinalTypeHandler中选一个来使用。
			EnumTypeHandler在某种意义上来说是比较特别的，其他的处理器只针对某个特定的类，而它不同，它会处理任意继承了Enum的类。
			
		5).objectFactory(对象工厂)：MyBatis每次创建结果对象的新实例时，它都会使用一个对象工厂(ObjectFactory)实例来完成。默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认构造方法，要么在参数映射存在的时候通过参数构造方法来实例化。
			如果想覆盖对象工厂的默认行为，则可以通过创建自己的对象工厂来实现。
				public class ExampleObjectFactory extends DefaultObjectFactory {} 
				mybatis-config.xml
				<objectFactory type="org.mybatis.example.ExampleObjectFactory">
					<property name="someProperty" value="100"/>
				</objectFactory>
			ObjectFactory接口很简单，它包含两个创建用的方法，一个是创建默认构造方法的，另外一个是处理带参数的构造方法的。最后，setProperties方法可以被用来配置ObjectFactory，在初始化你的ObjectFactory实例后，objectFactory元素体中定义的属性会被传递给setProperties方法。
			
		6).插件(plugins)：
			MyBatis允许你在已映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis允许使用插件来拦截的方法调用，包括：
				a). Executor(update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)
				b). ParameterHandler(getParameterObject, setParameters)
				c). ResultSetHandler(handleResultSets, handleOutputParameters)
				d). StatementHandler(prepare, parameterize, batch,update,query)
			这些类中方法的细节可以通过每个方法的签名来发现，或者直接查看MyBatis的发行包中的源代码。假设你想做的不仅仅是监控方法的调用，那么你应该很好的了解正在重写的方法的行为。因为如果在试图修改或重写已有方法的行为的时候，你很可能在破坏MyBatis的核心模块。这些都是更底层的类和方法，所以使用插件的时候要特别当心。
			通过MyBatis提供的强大机制，使用插件是非常简单的，只需实现Interceptor接口，并指定了想要拦截的方法签名即可。
			
		7).配置环境(environments)：
			MyBatis可以配置成适应多种环境，这种机制有助于将SQL映射应用于多种数据库之中，
			
			不过要记住：尽管可以配置多个环境，每个SqlSessionFactory只能选择其一。
			所以，如果你想连接两个数据库，就需要创建两个SqlSessionFactory实例，每个数据库对应一个。
			
			每个数据库对应一个SqlSessionFactory实例
			为了指定创建哪种环境，只要将它作为可选的参数传递给SqlSessionFactoryBuilder即可。可以接受环境配置的两个方法签名是：
				SqlSessionFactory factory = sqlSessionFactoryBuilder.build(reader, environment);
				SqlSessionFactory factory = sqlSessionFactoryBuilder.build(reader, environment, properties);
			如果忽略了环境配置，那么默认环境将会被加载，如下所示：
				SqlSessionFactory factory = sqlSessionFactoryBuilder.build(reader);
				SqlSessionFactory factory = sqlSessionFactoryBuilder.build(reader, properties);
				
			环境元素定义了如何配置环境：
				<environments default="development">
					<environment id="development">
						<transactionManager type="JDBC">
							<property name="..." value="..."/>
						</transactionManger>
						<dataSource type="POOLED">
							<property name="driver" value="${dirver}"/>;
							<property name="url" value="${url}"/>;
							<property name="username" value="${username}"/>;
							<property name="password" value="${password}"/>;
						</dataSource>
					</environment>
				</environments>
			注意这里的关键点：
				a)默认的环境ID(比如：default="development")。
				b)每个environment元素定义的环境ID(比如：id="development")。
				c)事务管理器的配置(比如：type="JDBC")。
				d)数据源的配置(比如：type="POOLED")。
			
			事务管理器：在MyBatis中有两种类型的事务管理器(也就是type="[JDBC|MANAGED]")：
				a).JDBC-这个配置就是直接使用了JDBC的提交和回滚设置，它依赖于从数据源得到的连接来管理事务范围。
				b).MANAGED 这个配置几乎没做什么。它从来不提交或回滚一个连接，而是让容器来管理事务的整个生命周期(比如JEE应用服务器的上下文)。默认情况下它会关闭连接，然而一些容器不希望这样，因此需要将closeConnection属性设置为false来阻止它默认的关闭行为。例如：
					<transactionManager type="MANAGED">
						<property name="closeConnection" value="false"/>
					</transactionManger>
					如果正在使用Spring+MyBatis，则没有必要配置事务管理器，因为Spring模块会使用自带的管理器来覆盖前面的配置。
					这两种事务管理器类型都不需要任何属性。它们不过是类型别名，换句话说，你可以使用TransactionFactory接口的实现类的完全限定名或类型别名代替它们。
					public interface TransactionFactory{
						void setProperties(Properties props);
						Transaction newTransaction(Connection conn);
						Transaction newTransaction(DataSource dataSource, TransactionIsolationLevel level, boolean autoCommit);
					}
					
					任何在XML中配置的属性在实例化之后将会被传递给setProperties()方法。你也需要创建一个Transaction接口的实现类，这个接口也很简单：
						public interface Transaction{
							Connection getConnection() throws SQLException;
							void commit() throws SQLException;
							void rollback() throws SQLException;
							void close() throws SQLException;
						}
					使用这两个接口，你可以为安全自定义MyBatis对事物的处理。
					
			数据源(dataSource)：dataSource元素使用标准的JDBC数据源接口来配置JDBC连接对象的资源。
				a).许多MyBatis的应用程序将会按示例中的例子来配置数据源。然而它并不是必须的。要知道为了方便使用延迟加载，数据源才是必须的。
					有三种内建的数据源类型（也就是type="[UNPOOLED|POOLED|JNDI]"）：
					UNPOOLED：这个数据源的实现只是每次被请求时打开和关闭连接。虽然有一点慢，它对及时可用连接方面没有性能要求的简单应用程序是一个很好的选择。不同的数据库在这方面表现也是不一样的，所以对某些数据库来说
						使用连接池并不重要，这个配置也是理想的。UNPOOLED类型的数据源仅仅需要配置以下五种属性：
							driver：这是JDBC驱动的Java类的完全限定名(并不是JDBC驱动中可能包含的数据源类)。
							url：这是数据库的JDBC URL地址。
							username：登录数据库的用户名。
							password：登录数据库的密码。
							defaultTransactionIsolationLevel：默认的连接事务隔离级别。
						作为可选项，你也可以传递属性给数据库驱动。要这样做，属性的前缀为”driver“，例如：
							driver.encoding=UTF8
							
					POOLED：这种数据源的实现利用”池“的概念将JDBC连接对象组织起来，避免了创建新的连接实例所必需的初始化和认证时间。这是一种使得并发的Web应用快速响应请求的流行处理方式。
					除了上述提到的UNPOOLED下的属性外，会有更多属性用来配置POOLED的数据源：
						1）poolMaximumActiveConnections：在任意时间可以存在的活动(也就是正在使用)连接数量，默认值：10
						2）poolMaximumIdleConnections：任意时间可能存在的空闲连接数
						3）poolMaximumCheckoutTime：在被强制返回之前，池中连接被检出(checked out)时间，默认值：20000毫秒(即20秒)
						4）poolTimeToWait：这是一个底层设置，如果获取连接花费的相当长的时间，它会给连接池打印状态日志并重新尝试获取一个连接（避免在误配置的情况下一直安静的失败），默认值：20000毫秒(即20秒)。
						5）poolPingQuery：发送到数据库的侦测查询，用来检验连接是否处在正常工作秩序中并准备接受请求。默认是”NO PING QUERY SET“，这会导致多数数据库驱动失败时带有一个恰当的错误消息。
						6）poolPingEnabled：是否启用侦测查询。若开启，也必须使用一个可执行的SQL语句设置poolPingQuery属性（最好是一个非常快的SQL），默认值：false
						7）poolPingConnectionsNotUsedFor：配置poolPingQuery的使用频度。这可以被设置成匹配具体的数据库连接超时时间，来避免不必要的侦测，默认值：0（即所有连接每一时刻都被侦测，当然仅当poolPingEnabled为true时适用）。
						
					JNDI：这个数据源的实现是为了能在如EJB或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个JNDI上下文的引用。这种数据源配置只需要两个属性：
						1）initial_context：这个属性用来在InitialContext中寻找上下文(即，initialContext.lookup(initial_context)。这是个可选属性，如果忽略，那么data_source属性将会直接从InitialContext中寻找
						2）data_source：这是引用数据源实例位置的上下文的路径。提供了initial_context配置时会在其返回的上下文中进行查找，没有提供时则直接在initialContext中查找。
						和其他数据源配置类似，可以通过添加前缀“env.”直接把属性传递给初始上下文。比如：
							env.encoding=UTF8
						这就会在初始上下文(InitialContext)实例化时往它的构造方法传递值为UTF8的encoding属性
						通过需要实现接口org.apache.ibatis.datasource.DataSourceFactory，也可使用任何第三方数据源，：
						public interface DataSourceFactory{
							void setProperties(Properties props);
							DataSource getDataSource();
						}
						org.apache.ibatis.datasource.unpooled.UnpooledDataSourceFactory可被用作父类来构建新的数据源适配器，比如下面这段插入C3P0数据源所必需的代码
							import org.apache.ibatis.datasource.unpooled.UnpooledDataSourceFactory;
							import com.mchange.v2.c3p0.ComboPooledDataSource;
									
							public class C3P0DataSourceFactory extends UnpooledDataSourceFactory {

							  public C3P0DataSourceFactory() {
								this.dataSource = new ComboPooledDataSource();
							  }
							}
						为了让其工作，为每个需要MyBatis调用的setter方法中增加一个属性。下面是一个可以连接至PostgreSQL数据库的例子：
							<dataSource type="org.myproject.C3P0DataSourceFactory">
								<property name="driver" value="org.postgresql.Driver"/>
								<property name="url" value="jdbc:postgresql:mydb"/>
								<property name="username" value="postgres"/>
								<property name="password" value="root"/>
							</dataSource>
							
					databaseldProvider：MyBatis是基于映射语句的databaseId属性来支持不同数据库厂商执行不同的语句。MyBatis会加载不带databaseId属性和带有匹配当前数据库databaseId属性的所有语句。如果同时找到带有databaseId和不带databaseId的相同语句，则后者会被抛弃。为支持多厂商特性只要像下面这样在mybatis-config.xml文件中加入databaseIdProvider即可：
					<databaseIdProvider type="DB_VENDOR" />
					这里的DB_VENDOR会通过DatabaseMetaData#getDatabaseProductName()返回的字符串进行设置。由于通常情况下这个字符串都非常长而且相同产品的不同版本会返回不同的值，所以最好通过设置属性别名来使其变短，如下：
					<databaseIdProvider type="DB_VENDOR">
						<property name="SQL Server" value="sqlserver"/>
						<property name="DB2" value="db2"/>
						<property name="Oracle" value="oracle"/>
					</databaseIdProvider>
					在有properties时，DB_VENDOR databaseIdProvider的将被设置为第一个能匹配数据库产品名称的属性键对应的值，如果没有匹配的属性将会设置为“null”。在这个例子中，如果getDatabaseProductName返回“Oracle(DataDirect)”，databaseId将被设置为"oracle"。
					你可以通过实现接口org.apache.ibatis.mapping.DatabaseIdProvider并在mybatis-config.xml中注册来构建自己的DatabaseIdProvider：
					public interface DatabaseIdProvider{
						void setProperties(Properties p);
						String getDatabaseId(DataSource dataSource) throws SQLException;
					}
					
			映射器(mappers)：可以使用相对于类路径的资源引用，或完全限定资源定位符（包括file:///的URL），或类名和包名等。如：
				<mappers>
					<!-- Using classpath relative resources 相对类路径 --> 
					<mapper resource="org/mybatis/builder/AuthorMapper.xml"/>
					<!-- Using url fully qualified paths 完全限定资源 -->
					<mapper url="file:///var/mappers/AuthorMapper.xml"/>
					<!-- Using mapper interface classes 类名和包名 -->
					<mapper class="org.mybatis.builder.AuthorMapper"/>
					<!-- Register all interfaces in a package as mappers 告诉在哪个包下面找，这种应该是要配置注解的 -->
					<package name="org.mybatis.builder"/>
				</mappers>

三、XML映射文件：
	SQL映射文件有很少的几个顶级元素(按照它们应该被定义的顺序)：
		1).cache：给定命名空间的缓存配置。
		2).cache-ref：其他命名空间缓存配置的引用。
		3).resultMap：是最复杂也是最强大的的元素，用来描述如何从数据库结果集中来加载对象。
		4).-- parameterMap - 已废弃！老式风格的参数映射。内联参数是首选，这个元素可能在将来被移除
		5).sql：可被其他语句引用的可重用语句块。
		6).insert：映射插入语句
		7).update：映射更新语句
		8).delete：映射删除语句
		9).select：映射查询语句
		
	select：
		<select id="selectPerson" parameterType="int" resultType="hashmap">
			SELECT * FROM PERSON WHERE ID = #{id}
		</select>
		这个语句被称作selectPerson，接受一个int（或Integer）类型的参数，并返回一个HashMap类型的对象，其中的键是列名，值便是结果行中的对应值。
		select可配置属性：
			id            在命名空间中唯一的标识符，可以被用来引用这条语句
			parameterType 将会传入这条语句的参数类的完全限定名或别名
			resultType    从查询语句中返回期望类型的类的完全限定名或别名。若是集合，则应该是集合包含的类型。使用resultType或resultMap，但两者不能同时使用。
			resultMap     外部resultMap的命名引用。结果集的映射是Mybatis的最强大的的特性。
			flushCache    若为true，本条语句被调用则会导致本地缓存和二级缓存都会被清空，默认值：false
			useCache      若为true，本条语句的结果会被二级缓存，默认值：对select元素为true
			timeout       驱动程序等待数据库返回请求结果的秒数。默认值为unset(依赖驱动)
			fetchSize     尝试影响驱动程序每次批量返回的结果行数和这个设置值相等。默认值为unset(依赖驱动)。
			statementType STATEMENT，PREPARED或CALLABLE的一个。这会让MyBatis分别使用Statment，PreparedStatement，CallableStatement，默认值：PREPARED。
			resultSetType FORWORD_ONLY，SCROLL_SENSITIVE或SCROLL_INSENSITIVE中的一个，默认值为unset(依赖驱动)
			databaseId    如果配置了databaseIdProvider，MyBatis会加载所有的不带databaseId或匹配当前databaseId语句；如果带或者不带的语句都有，则不带的会被忽略
			resultOrdered 这个设置仅针对嵌套结果select语句适用：若为true,就是假设包含了嵌套结果或分组，这样的话当返回一个主结果行的时候，就不会有对前面结果集的引用的情况。这就使得在获取嵌套的结果集的时候不至于导致内存不够用
			resultSets    仅对多结果集的情况适用，将列出语句执行后返回的结果集并给每个结果集一个名称，名称是逗号分隔的